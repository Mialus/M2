<?php
class SPDO {
    private $_PDOInstance = null;
    const DEFAULT_SQL_HOST = 'localhost'; 
    const DEFAULT_SQL_USER = 'm2test1'; 
    const DEFAULT_SQL_PASSWORD = 'm2test1'; 
    const DEFAULT_SQL_DATABASE = 'm2test1';
	
    private static $_instance = null;

    private function __construct() {
        $this->_PDOInstance = new PDO(
            'mysql:dbname='.self::DEFAULT_SQL_DATABASE.
            ';host='.self::DEFAULT_SQL_HOST,
            self::DEFAULT_SQL_USER,
            self::DEFAULT_SQL_PASSWORD);
    }

    public static function getInstance() {
        if (is_null(self::$_instance))
            self::$_instance = new SPDO();
        return self::$_instance;
    }
	
	public function userConnection($id, $mdp) {
		if(!SPDO::isMailCorrect($id) && $id!=='admin') {
			return false;
		}
		
		try {
            $pbd = $this->_PDOInstance->prepare("SELECT login, lastname, firstname, adherant, admin FROM User WHERE login=:login and pwd=:pass and adherant='1'");
            $pbd->bindValue(':login', $id, PDO::PARAM_STR);
            $pbd->bindValue(':pass', $mdp, PDO::PARAM_STR);
            $pbd->debugDumpParams();
            $pbd->execute();
        } catch (PDOException $e) {
            echo $e->getMessage();
			return false;
        }

        if ($pbd->rowCount() > 0) {
            while ($donnees = $pbd->fetch()) {
                $_SESSION['login'] = $id;
                $_SESSION['nom'] = $donnees['firstname'];
                $_SESSION['prenom'] = $donnees['lastname'];
                $_SESSION['adherant'] = $donnees['adherant'];
                $_SESSION['admin'] = $donnees['admin'];
            }
			return true;
        }
		return false;
	}
	
	public function userInscription($log, $mdp, $nom, $prenom)
    {
        try {
            $pbd =  $this->_PDOInstance->prepare("INSERT INTO User (login, pwd, lastname, firstname) VALUES(:login,:pass,:nom,:prenom)");
            $pbd->bindValue(':login', $log,PDO::PARAM_STR);
            $pbd->bindValue(':pass', $mdp,PDO::PARAM_STR);
			$pbd->bindValue(':nom', $nom,PDO::PARAM_STR);
			$pbd->bindValue(':prenom', $prenom,PDO::PARAM_STR);
            $pbd->execute();
        } catch (PDOException $e) {
            echo $e->getMessage();
			return false;
        }
		return true;
    }
	
	private static function isMailCorrect($mail){
		$mail=filter_var($mail,FILTER_SANITIZE_EMAIL);
		return filter_var($mail, FILTER_VALIDATE_EMAIL);
	}
	public function afficheEvent() 
    {
        try { 
		
            $pbd = $this->_PDOInstance->prepare("SELECT dateEvent FROM Event WHERE  DATEDIFF(dateEvent,NOW())>=0 ORDER BY dateEvent"); 
            $pbd->execute(); 
        } catch (PDOException $e) { 
            echo $e->getMessage(); 
        } 
 
        if ($pbd->rowCount() > 0) { 
			echo("<form method='post'>");
            while ($donnees = $pbd->fetch()) {
				echo "<label>Mercredi ".$donnees['dateEvent']." </label>"; 
				if($this->participe($donnees['dateEvent'])){
					echo("<input type='checkbox' name='nfo[]' value='".$donnees['dateEvent']." checked><br>");
					
				}else{
					echo("<input type='checkbox' name='nfo[]' value='".$donnees['dateEvent']." '><br>");
				}
            } 
			echo("<input type='submit' name='sub' value='Sauvegarder'></form>");
            return true; 
        } else { 
            return false; 
        } 
    }
	
	public function participe($dateEvent) 
    { 
        try { 
		
            $pbd = $this->_PDOInstance->prepare("SELECT dateEvent FROM ParticiantWHERE Particiant.dateEvent=:date and Particiant.login ORDER BY dateEvent"); 
			$pbd->bindValue(':date', $dateEvent,PDO::PARAM_STR);
            $pbd->execute(); 
        } catch (PDOException $e) { 
            echo $e->getMessage(); 
        }  
        if ($pbd->rowCount() > 0) { 
            return true; 
        } else { 
            return false; 
        } 
    }
	
	
}
